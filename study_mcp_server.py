#!/usr/bin/env python3
"""
Study MCP Server - Provides detailed educational content and explanations
"""

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional

from mcp.server import Server
from mcp.server.models import InitializationOptions
from mcp.server.stdio import stdio_server
from mcp.types import Resource, Tool, TextContent

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Educational knowledge base with detailed content
STUDY_KNOWLEDGE_BASE = {
    "machine learning": {
        "definition": "Machine Learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.",
        "explanation": """Machine Learning (ML) is fundamentally about creating algorithms that can identify patterns in data and make predictions or decisions. Instead of programming explicit rules, we feed data to algorithms that learn these rules automatically.

**Core Concepts:**
1. **Training Data**: Historical data used to teach the algorithm
2. **Features**: Input variables used to make predictions  
3. **Model**: The algorithm that learns from data
4. **Prediction**: Output generated by the trained model

**Types of Machine Learning:**
- **Supervised Learning**: Learning from labeled examples (like email spam detection)
- **Unsupervised Learning**: Finding patterns in unlabeled data (like customer segmentation)
- **Reinforcement Learning**: Learning through interaction and feedback (like game AI)

**Key Algorithms:**
- Linear Regression for continuous predictions
- Random Forest for classification tasks
- Neural Networks for complex pattern recognition
- Support Vector Machines for classification and regression""",
        "examples": [
            "Netflix uses ML to recommend movies based on your viewing history and ratings",
            "Tesla's Autopilot uses computer vision ML to identify objects on the road",
            "Google Translate employs neural networks to translate between 100+ languages",
            "Spotify's Discover Weekly uses collaborative filtering to suggest new music",
            "Amazon's Alexa uses natural language processing to understand voice commands"
        ],
        "applications": [
            "GPT-4 and ChatGPT for conversational AI (2024-2025)",
            "DALL-E 3 for AI image generation (2024)",
            "GitHub Copilot for code completion (2025)",
            "Tesla FSD Beta 12 for autonomous driving (2025)",
            "AlphaFold 3 for protein structure prediction (2024)"
        ],
        "careers": ["Data Scientist", "Machine Learning Engineer", "AI Research Scientist", "Computer Vision Engineer"],
        "skills": ["Python", "Statistics", "Linear Algebra", "TensorFlow/PyTorch", "SQL"],
        "salary": "$120,000 - $250,000",
        "growth": "36% (much faster than average)",
        "confidence": 0.95
    },
    
    "data science": {
        "definition": "Data Science is an interdisciplinary field that uses scientific methods, algorithms, and systems to extract knowledge and insights from structured and unstructured data.",
        "explanation": """Data Science combines statistics, computer science, and domain expertise to solve complex problems using data. It's the practice of deriving actionable insights from large datasets to drive business decisions.

**Key Components:**
1. **Data Collection**: Gathering relevant data from various sources
2. **Data Cleaning**: Removing errors and inconsistencies from datasets
3. **Exploratory Data Analysis**: Understanding patterns and relationships
4. **Modeling**: Building predictive or descriptive models
5. **Visualization**: Communicating findings through charts and dashboards

**The Data Science Process:**
- Problem Definition → Data Collection → Data Cleaning → Analysis → Modeling → Validation → Deployment → Monitoring

**Essential Statistics:**
- Descriptive statistics (mean, median, standard deviation)
- Inferential statistics (hypothesis testing, confidence intervals)
- Probability distributions and Bayesian methods
- Regression analysis and correlation""",
        "examples": [
            "Uber uses data science to optimize driver routes and predict demand surges",
            "LinkedIn analyzes user behavior to improve job recommendations",
            "Walmart processes 2.5 petabytes of data hourly for inventory optimization",
            "Meta uses data science for content ranking and ad targeting",
            "Airbnb employs predictive pricing models to help hosts set optimal rates"
        ],
        "applications": [
            "Real-time fraud detection in financial transactions (2025)",
            "Predictive maintenance in manufacturing using IoT sensors",
            "Personalized medicine based on genomic data analysis",
            "Climate change modeling using satellite and sensor data",
            "Supply chain optimization post-COVID-19 disruptions"
        ],
        "careers": ["Data Scientist", "Data Analyst", "Business Intelligence Analyst", "Research Scientist"],
        "skills": ["Python/R", "SQL", "Statistics", "Machine Learning", "Data Visualization"],
        "salary": "$95,000 - $200,000",
        "growth": "36% (much faster than average)",
        "confidence": 0.95
    },

    "calculus": {
        "definition": "Calculus is the mathematical study of continuous change, focusing on derivatives and integrals to analyze rates of change and areas under curves.",
        "explanation": """Calculus is divided into two main branches: Differential Calculus (studying rates of change) and Integral Calculus (studying accumulation of quantities).

**Differential Calculus:**
- **Derivatives**: Measure the rate of change of a function
- **Applications**: Finding slopes, optimization problems, related rates
- **Rules**: Power rule, product rule, chain rule, quotient rule
- **Geometric Interpretation**: Slope of tangent line to a curve

**Integral Calculus:**
- **Integrals**: Calculate the area under curves and accumulation
- **Applications**: Finding areas, volumes, work done, probability
- **Techniques**: Substitution, integration by parts, partial fractions
- **Geometric Interpretation**: Area between curve and x-axis

**Fundamental Theorem of Calculus:**
Links derivatives and integrals, showing they are inverse operations.

**Multivariable Calculus:**
- Partial derivatives for functions of multiple variables
- Multiple integrals for calculating volumes and surface areas
- Vector calculus for physics and engineering applications""",
        "examples": [
            "Netflix uses calculus to optimize video streaming quality based on bandwidth",
            "SpaceX applies calculus to calculate rocket trajectories and fuel consumption",
            "Google's PageRank algorithm uses calculus for web page ranking",
            "Financial analysts use derivatives to model option pricing (Black-Scholes)",
            "Medical imaging (MRI, CT scans) relies on calculus for image reconstruction"
        ],
        "applications": [
            "AI/ML optimization algorithms use gradient descent (calculus)",
            "Climate models use differential equations to predict weather patterns",
            "Economic forecasting models rely on calculus for trend analysis",
            "Computer graphics use calculus for realistic lighting and physics",
            "Epidemiological models (like COVID-19 spread) use differential equations"
        ],
        "careers": ["Data Scientist", "Quantitative Analyst", "Engineer", "Research Scientist"],
        "skills": ["Advanced Mathematics", "Programming", "Statistical Analysis", "Problem Solving"],
        "salary": "$75,000 - $180,000",
        "growth": "15% (faster than average)",
        "confidence": 0.90
    },

    "quantum physics": {
        "definition": "Quantum Physics is the branch of physics that studies the behavior of matter and energy at the atomic and subatomic level, where classical physics laws break down.",
        "explanation": """Quantum physics reveals that at microscopic scales, particles behave according to probabilities rather than definite outcomes, leading to phenomena that seem counterintuitive.

**Key Principles:**
1. **Wave-Particle Duality**: Particles exhibit both wave and particle properties
2. **Uncertainty Principle**: Cannot precisely know both position and momentum simultaneously
3. **Superposition**: Particles can exist in multiple states simultaneously
4. **Entanglement**: Particles can be instantaneously connected across vast distances
5. **Quantization**: Energy exists in discrete packets called quanta

**Mathematical Framework:**
- Schrödinger Equation governs quantum system evolution
- Probability amplitudes determine measurement outcomes
- Operators represent physical observables
- Hilbert spaces provide the mathematical structure

**Key Experiments:**
- Double-slit experiment demonstrating wave-particle duality
- Bell's theorem tests proving quantum entanglement
- Quantum tunneling effects in electronics""",
        "examples": [
            "Google's Sycamore quantum computer achieved quantum supremacy in 2019",
            "IBM's quantum computers are available via cloud for research (2025)",
            "MRI machines use quantum properties of hydrogen atoms for medical imaging",
            "Laser technology relies on quantum mechanics for coherent light emission",
            "GPS satellites require quantum corrections for accurate positioning"
        ],
        "applications": [
            "Quantum computing for cryptography and optimization (IBM, Google, 2025)",
            "Quantum sensors for ultra-precise measurements",
            "Quantum communication for unhackable data transmission",
            "Drug discovery using quantum simulations of molecular interactions",
            "Quantum radar for stealth aircraft detection"
        ],
        "careers": ["Quantum Physicist", "Quantum Engineer", "Research Scientist", "Technology Consultant"],
        "skills": ["Advanced Mathematics", "Physics", "Programming", "Linear Algebra", "Statistical Mechanics"],
        "salary": "$90,000 - $200,000",
        "growth": "25% (much faster than average)",
        "confidence": 0.90
    },

    "biology": {
        "definition": "Biology is the scientific study of life and living organisms, including their physical structure, chemical processes, molecular interactions, physiological mechanisms, development, and evolution.",
        "explanation": """Biology encompasses all aspects of life from the molecular level to entire ecosystems. It seeks to understand how living systems work, evolve, and interact.

**Major Branches:**
1. **Cell Biology**: Study of cellular structure and function
2. **Genetics**: Heredity and variation in living organisms
3. **Ecology**: Interactions between organisms and their environment
4. **Evolution**: Changes in species over time
5. **Physiology**: Functions and mechanisms in living systems

**Fundamental Concepts:**
- Cell theory: All life is composed of cells
- DNA as the genetic material carrying hereditary information
- Evolution by natural selection
- Homeostasis: Maintenance of stable internal conditions
- Energy flow through ecosystems

**Modern Biology:**
- Molecular biology techniques (PCR, DNA sequencing)
- CRISPR gene editing technology
- Bioinformatics and computational biology
- Systems biology approach to understanding complex interactions""",
        "examples": [
            "CRISPR gene editing treats sickle cell disease patients (2023-2025)",
            "mRNA vaccines (Moderna, Pfizer) use biological principles for COVID-19 protection",
            "Personalized cancer treatments based on tumor genetics",
            "23andMe provides genetic ancestry and health predisposition analysis",
            "Agricultural crops engineered for drought resistance and nutrition"
        ],
        "applications": [
            "Gene therapy for inherited diseases (FDA-approved treatments 2024-2025)",
            "Pharmacogenomics for personalized drug prescriptions",
            "Synthetic biology for biofuel and pharmaceutical production",
            "Conservation biology for endangered species protection",
            "Microbiome research for human health applications"
        ],
        "careers": ["Biologist", "Genetic Counselor", "Bioinformatician", "Medical Researcher", "Environmental Scientist"],
        "skills": ["Laboratory Techniques", "Statistics", "Bioinformatics", "Chemistry", "Research Methods"],
        "salary": "$65,000 - $150,000",
        "growth": "18% (much faster than average)",
        "confidence": 0.90
    }
}

def search_knowledge_base(topic: str) -> Optional[Dict[str, Any]]:
    """Search for topic in knowledge base with flexible matching"""
    topic_lower = topic.lower().strip()
    
    # Direct match
    if topic_lower in STUDY_KNOWLEDGE_BASE:
        return STUDY_KNOWLEDGE_BASE[topic_lower]
    
    # Partial matching
    for key, content in STUDY_KNOWLEDGE_BASE.items():
        if topic_lower in key or key in topic_lower:
            return content
        
        # Check for keyword matches
        keywords = {
            "ml": "machine learning",
            "ai": "machine learning",
            "artificial intelligence": "machine learning",
            "stats": "data science",
            "statistics": "data science",
            "math": "calculus",
            "mathematics": "calculus",
            "physics": "quantum physics",
            "quantum": "quantum physics",
            "bio": "biology",
            "genetics": "biology",
            "life science": "biology"
        }
        
        if topic_lower in keywords and keywords[topic_lower] == key:
            return content
    
    return None

def create_study_server() -> Server:
    """Create the study MCP server"""
    server = Server("study-server")

    @server.list_resources()
    async def handle_list_resources() -> List[Resource]:
        """List available study resources"""
        return [
            Resource(
                uri=f"study://topic/{topic}",
                name=f"Study: {topic.title()}",
                description=f"Detailed educational content about {topic}",
                mimeType="application/json",
            )
            for topic in STUDY_KNOWLEDGE_BASE.keys()
        ]

    @server.read_resource()
    async def handle_read_resource(uri: str) -> str:
        """Read a specific study resource"""
        if not uri.startswith("study://topic/"):
            raise ValueError(f"Unknown resource: {uri}")
        
        topic = uri.replace("study://topic/", "")
        content = search_knowledge_base(topic)
        
        if not content:
            raise ValueError(f"Topic not found: {topic}")
        
        return json.dumps(content, indent=2)

    @server.list_tools()
    async def handle_list_tools() -> List[Tool]:
        """List available study tools"""
        return [
            Tool(
                name="get_study_explanation",
                description="Get detailed explanation for any academic topic with examples and career information",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "topic": {
                            "type": "string",
                            "description": "The academic topic to explain (e.g., 'machine learning', 'calculus', 'biology')"
                        },
                        "include_examples": {
                            "type": "boolean",
                            "description": "Include real-world examples",
                            "default": True
                        },
                        "include_career_info": {
                            "type": "boolean", 
                            "description": "Include career path and salary information",
                            "default": True
                        }
                    },
                    "required": ["topic"]
                }
            ),
            Tool(
                name="search_topics",
                description="Search for available study topics",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "Search query for topics"
                        }
                    },
                    "required": ["query"]
                }
            )
        ]

    @server.call_tool()
    async def handle_call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
        """Handle tool calls"""
        try:
            if name == "get_study_explanation":
                topic = arguments.get("topic", "").strip()
                include_examples = arguments.get("include_examples", True)
                include_career_info = arguments.get("include_career_info", True)
                
                if not topic:
                    return [TextContent(type="text", text="Error: Topic is required")]
                
                content = search_knowledge_base(topic)
                
                if not content:
                    # Generate a helpful response for unknown topics
                    response = {
                        "topic": topic,
                        "definition": f"{topic.title()} is an important academic subject that requires detailed study.",
                        "explanation": f"""I don't have comprehensive information about "{topic}" in my current knowledge base. However, I can provide some general guidance:

**Research Strategy:**
1. Start with reputable academic sources and textbooks
2. Use educational platforms like Khan Academy, Coursera, or edX  
3. Apply concepts through exercises and real-world problems
4. Join study groups or online communities related to this topic

**Recommended Resources:**
- Academic textbooks and peer-reviewed journals
- University course materials and lecture notes
- Professional organizations in the field
- Expert-reviewed online resources

For the most accurate and detailed information about "{topic}", I recommend consulting authoritative sources in the field.""",
                        "examples": [
                            "Search for current research papers and case studies",
                            "Look for industry applications and real-world implementations", 
                            "Find recent news articles about developments in this field"
                        ],
                        "applications": [
                            "Explore how this topic applies to current technology and industry",
                            "Research recent breakthroughs and innovations",
                            "Investigate career opportunities in related fields"
                        ],
                        "careers": ["Research career paths related to this field"],
                        "skills": ["Identify key skills needed for this topic"],
                        "salary": "Research current market rates",
                        "growth": "Investigate job market trends",
                        "confidence": 0.3,
                        "sources": ["Academic institutions", "Professional organizations", "Industry publications"],
                        "needs_research": True
                    }
                else:
                    response = {
                        "topic": topic,
                        "definition": content["definition"],
                        "explanation": content["explanation"],
                        "confidence": content.get("confidence", 0.85),
                        "sources": ["MCP Study Server", "Academic Resources", "Industry Data"]
                    }
                    
                    if include_examples:
                        response["examples"] = content.get("examples", [])
                        response["applications"] = content.get("applications", [])
                    
                    if include_career_info:
                        response["careers"] = content.get("careers", [])
                        response["skills"] = content.get("skills", [])
                        response["salary"] = content.get("salary", "Varies")
                        response["growth"] = content.get("growth", "Research needed")
                
                return [TextContent(type="text", text=json.dumps(response, indent=2))]
            
            elif name == "search_topics":
                query = arguments.get("query", "").lower()
                matching_topics = []
                
                for topic, content in STUDY_KNOWLEDGE_BASE.items():
                    if query in topic or query in content["definition"].lower():
                        matching_topics.append({
                            "topic": topic,
                            "definition": content["definition"][:100] + "..."
                        })
                
                result = {
                    "query": query,
                    "matches": matching_topics,
                    "total": len(matching_topics)
                }
                
                return [TextContent(type="text", text=json.dumps(result, indent=2))]
            
            else:
                return [TextContent(type="text", text=f"Error: Unknown tool '{name}'")]
                
        except Exception as e:
            logger.error(f"Error in tool call {name}: {e}")
            return [TextContent(type="text", text=f"Error: {str(e)}")]

    return server

async def main():
    """Main function to run the study MCP server"""
    server = create_study_server()
    
    # Configure initialization options
    options = InitializationOptions(
        server_name="study-server",
        server_version="1.0.0",
        capabilities=server.get_capabilities(
            notification_options=None,
            experimental_capabilities=None,
        ),
    )
    
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            options,
        )

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("Study MCP Server - Provides detailed educational content")
        print("Usage: python study_mcp_server.py")
        print("\nProvides tools:")
        print("- get_study_explanation: Get detailed topic explanations")
        print("- search_topics: Search available study topics")
    else:
        asyncio.run(main())
